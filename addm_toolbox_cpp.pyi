from typing import Dict, List

class DDM:
    def __init__(self, d: float, sigma: float, barrier: float = ..., nonDecisionTime: int = ..., bias: float = ..., decay: float = ...) -> None: ...
    def computeParallelNLL(self, trials: List[DDMTrial], debug: bool = ..., timeStep: int = ..., approxStateStep: float = ...) -> ProbabilityData: ...
    def exportTrial(self, dt: DDMTrial, filename: str) -> None: ...
    @classmethod
    def fitModelMLE(cls, trials: List[DDMTrial], rangeD: List[float], rangeSigma: List[float], computeMethod: str = ..., normalizePosteriors: bool = ..., barrier: float = ..., nonDecisionTime: int = ..., bias: List[float] = ..., decay: List[float] = ...) -> MLEinfoDDM: ...
    def getTrialLikelihood(self, trial: DDMTrial, debug: bool = ..., timeStep: int = ..., approxStateStep: float = ...) -> float: ...
    def simulateTrial(self, valueLeft: int, valueRight: int, timeStep: int = ..., seed: int = ...) -> DDMTrial: ...
    @property
    def barrier(self) -> float: ...
    @property
    def bias(self) -> float: ...
    @property
    def d(self) -> float: ...
    @property
    def decay(self) -> float: ...
    @property
    def nonDecisionTime(self) -> int: ...
    @property
    def sigma(self) -> float: ...

class DDMTrial:
    def __init__(self, RT: int, choice: int, valueLeft: int, valueRight: int) -> None: ...
    @classmethod
    def loadTrialsFromCSV(cls, filename: str) -> List[DDMTrial]: ...
    @classmethod
    def writeTrialsToCSV(cls, trials: List[DDMTrial], filename: str) -> None: ...
    @property
    def RDVs(self) -> List[float]: ...
    @property
    def RT(self) -> int: ...
    @property
    def choice(self) -> int: ...
    @property
    def timeStep(self) -> int: ...
    @property
    def valueLeft(self) -> int: ...
    @property
    def valueRight(self) -> int: ...

class FixationData:
    def __init__(self, probFixLeftFirst: float, latencies: List[int], transitions: List[int], fixations: Dict[int,List[float]]) -> None: ...
    @property
    def fixations(self) -> Dict[int,List[float]]: ...
    @property
    def latencies(self) -> List[int]: ...
    @property
    def probFixLeftFirst(self) -> float: ...
    @property
    def transitions(self) -> List[int]: ...

class MLEinfoDDM:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def likelihoods(self) -> Dict[DDM,float]: ...
    @property
    def optimal(self) -> DDM: ...

class MLEinfoaDDM:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def likelihoods(self) -> Dict[aDDM,float]: ...
    @property
    def optimal(self) -> aDDM: ...

class ProbabilityData:
    def __init__(self, likelihood: float = ..., NLL: float = ...) -> None: ...
    @property
    def NLL(self) -> float: ...
    @property
    def likelihood(self) -> float: ...
    @property
    def trialLikelihoods(self) -> List[float]: ...

class aDDM(DDM):
    def __init__(self, d: float, sigma: float, theta: float, k: float = ..., barrier: float = ..., nonDecisionTime: int = ..., bias: float = ..., decay: float = ...) -> None: ...
    def computeParallelNLL(self, trials: List[aDDMTrial], timeStep: int = ..., approxStateStep: float = ..., useAlternative: bool = ...) -> ProbabilityData: ...
    def exportTrial(self, adt: aDDMTrial, filename: str) -> None: ...
    @classmethod
    def fitModelMLE(cls, trials: List[aDDMTrial], rangeD: List[float], rangeSigma: List[float], rangeTheta: List[float], rangeK: List[float] = ..., computeMethod: str = ..., normalizePosteriors: bool = ..., barrier: float = ..., nonDecisionTime: int = ..., timeStep: int = ..., approxStateStep: float = ..., bias: List[float] = ..., decay: List[float] = ..., useAlternative: bool = ..., rangeOptional: Dict[str,List[float]] = ...) -> MLEinfoaDDM: ...
    def getTrialLikelihood(self, trial: aDDMTrial, timeStep: int = ..., approxStateStep: float = ...) -> float: ...
    def simulateTrial(self, valueLeft: int, valueRight: int, fixationData: FixationData, timeStep: int = ..., numFixDists: int = ..., fixationDist: Dict[int,List[float]] = ..., timeBins: List[int] = ..., seed: int = ...) -> aDDMTrial: ...
    @property
    def k(self) -> float: ...
    @property
    def optionalParams(self) -> Dict[str,float]: ...
    @property
    def theta(self) -> float: ...

class aDDMTrial(DDMTrial):
    def __init__(self, RT: int, choice: int, valueLeft: int, valueRight: int, fixItem: List[int] = ..., fixTime: List[int] = ..., fixRDV: List[float] = ..., uninterruptedLastFixTime: float = ...) -> None: ...
    @classmethod
    def loadTrialsFromCSV(cls, filename: str) -> List[aDDMTrial]: ...
    @classmethod
    def writeTrialsToCSV(cls, trials: List[aDDMTrial], filename: str) -> None: ...
    @property
    def fixItem(self) -> List[int]: ...
    @property
    def fixRDV(self) -> List[float]: ...
    @property
    def fixTime(self) -> List[int]: ...
    @property
    def uninterruptedLastFixTime(self) -> float: ...

def getEmpiricalDistributions(data: Dict[int,List[aDDMTrial]], timeStep: int = ..., maxFixTime: int = ..., numFixDists: int = ..., valueDiffs: List[int] = ..., subjectIDs: List[int] = ..., useOddTrials: bool = ..., useEvenTrials: bool = ..., useCisTrials: bool = ..., useTransTrials: bool = ...) -> FixationData: ...
def loadDataFromCSV(expDataFilename: str, fixDataFilename: str) -> Dict[int,List[aDDMTrial]]: ...
def loadDataFromSingleCSV(filename: str) -> Dict[int,List[aDDMTrial]]: ...
